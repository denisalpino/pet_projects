from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command, CommandStart

import services
import keyboards
from lexicon import LEXICON_RU
from database import User, Games


router = Router()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã \start
@router.message(CommandStart())
async def process_start_command(message: Message, UsersStorage: dict[int, User]):
    if message.from_user.id not in UsersStorage:
        UsersStorage[message.from_user.id] = User()

    await message.answer(
        text=LEXICON_RU['/start']
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã \help
@router.message(Command(commands='help'))
async def process_help_command(message: Message, UsersStorage: dict[int, User]):
    await message.answer(
        text=LEXICON_RU['/help']
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã \play
@router.message(Command(commands='play'))
async def process_play_command(message: Message | CallbackQuery, UsersStorage: dict[int, User]):
    user = UsersStorage[message.from_user.id]

    if isinstance(message, CallbackQuery):
        await message.message.delete()
        message = message.message

    if user.is_playing:
        await message.answer(
            text=LEXICON_RU[user.current_game.value]['impossible_answer']
        )
    else:
        user.is_playing = True

        await message.answer(
            text=LEXICON_RU['/play'],
            reply_markup=keyboards.games_kb
        )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã \roles
@router.message(Command(commands='roles'))
async def process_roles_command(message: Message, UsersStorage: dict[int, User]):
    user = UsersStorage[message.from_user.id]

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–µ–π—á–∞—Å –∏–≥—Ä–∞–µ—Ç, –≤—ã–≤–æ–¥–∏–º –ø—Ä–∞–≤–∏–ª–∞ —Ç–µ–∫—É—â–µ–π –∏–≥—Ä—ã, –∏–Ω–∞—á–µ –∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—ã–±–æ—Ä–æ–º –∏–≥—Ä—ã
    if user.current_game:
        await message.answer(
            text=LEXICON_RU[user.current_game.value]['/roles']
            )
    else:
        await message.answer(
            text=LEXICON_RU['/roles'],
            reply_markup=keyboards.roles_kb
        )


# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∏–≥—Ä—ã
@router.callback_query(F.data.in_(['rock_paper_scissors_roles', 'number_guessing_roles']))
async def describe_roles(callback: CallbackQuery, UsersStorage: dict[int, User]):
    game = callback.data.replace('_roles', '')

    await callback.answer() # –£–±–∏—Ä–∞–µ–º –∑–Ω–∞–∫ —á–∞—Å–æ–≤
    await callback.message.answer(
        text=LEXICON_RU[game]['/roles']
    )
    await callback.message.delete()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã \cancel
@router.message(Command(commands='cancel'))
async def process_cancel_command(message: Message, UsersStorage: dict[int, User]):
    user = UsersStorage[message.from_user.id]

    if user.is_playing:
        if user.current_game == Games.RockPaperScissors:
            await message.answer(
            text=LEXICON_RU['rock_paper_scissors']['impossible_answer']
            )
        else:
            user.current_game = None
            user.is_playing = False

            await message.answer(
            text=LEXICON_RU['/cancel']
            )
    else:
        await message.answer(
            text=LEXICON_RU['is_not_playing_yet']
        )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã \stat
@router.message(Command(commands='stat'))
async def process_stat_command(message: Message, UsersStorage: dict[int, User]):
    user = UsersStorage[message.from_user.id]

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–µ–π—á–∞—Å –∏–≥—Ä–∞–µ—Ç, –≤—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ç–µ–∫—É—â–µ–π –∏–≥—Ä–µ, –∏–Ω–∞—á–µ –∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—ã–±–æ—Ä–æ–º –∏–≥—Ä—ã
    if user.current_game:
        if user.current_game == Games.NumberGuessing:
            profile = user.number_guessing
        elif user.current_game == Games.RockPaperScissors:
            profile = user.rock_paper_scissors

        win_rate = round(100 * profile.wins / profile.total_games) if profile.total_games else 0

        await message.answer(
            text=LEXICON_RU[user.current_game.value]['/stat'].format(
                profile.total_games,
                profile.wins,
                win_rate
            )
        )
    else:
        await message.answer(
            text=LEXICON_RU['/stat'],
            reply_markup=keyboards.stat_kb
        )

# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∏–≥—Ä–µ
@router.callback_query(F.data.in_(['rock_paper_scissors_stat', 'number_guessing_stat']))
async def describe_stat(callback: CallbackQuery, UsersStorage: dict[int, User]):
    user = UsersStorage[callback.from_user.id]
    game = callback.data.replace('_stat', '')

    if game == Games.NumberGuessing.value:
        profile = user.number_guessing
    elif game == Games.RockPaperScissors.value:
        profile = user.rock_paper_scissors

    win_rate = round(100 * profile.wins / profile.total_games) if profile.total_games else 0

    await callback.answer() # –£–±–∏—Ä–∞–µ–º –∑–Ω–∞–∫ —á–∞—Å–æ–≤
    await callback.message.answer(
        text=LEXICON_RU[game]['/stat'].format(
            profile.total_games,
            profile.wins,
            win_rate
        )
    )
    await callback.message.delete()


# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É '–ö–∞–º–µ–Ω—åüóø, –Ω–æ–∂–Ω–∏—Ü—ã‚úÇÔ∏è, –±—É–º–∞–≥–∞üìÉ'
@router.callback_query(F.data == 'rock_paper_scissors')
async def start_rock_paper_scissors_game(callback: CallbackQuery, UsersStorage: dict[int, User]):
    user = UsersStorage[callback.from_user.id]

    user.is_playing = True
    user.current_game = Games.RockPaperScissors

    await callback.answer() # –£–±–∏—Ä–∞–µ–º –∑–Ω–∞–∫ —á–∞—Å–æ–≤
    await callback.message.answer(
        text=LEXICON_RU[user.current_game.value]['welcome'],
        reply_markup=keyboards.rock_paper_scissors_kb
    )
    await callback.message.delete()


# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫ '–ö–∞–º–µ–Ω—åüóø', '–ë—É–º–∞–≥–∞üìÉ', '–ù–æ–∂–Ω–∏—Ü—ã‚úÇÔ∏è'
@router.callback_query(F.data.in_(LEXICON_RU['rock_paper_scissors']['buttons']))
async def process_rock_paper_scissors_answer(callback: CallbackQuery, UsersStorage: dict[int, User]):
    user = UsersStorage[callback.from_user.id]

    bot_item = services.get_random_item() # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –æ—Ç–≤–µ—Ç
    result = services.get_winner(callback.data, bot_item) # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è

    bot_item = LEXICON_RU['rock_paper_scissors']['buttons'][bot_item]

    if result == 'win':
        user.rock_paper_scissors.wins += 1
    user.rock_paper_scissors.total_games += 1

    await callback.answer() # –£–±–∏—Ä–∞–µ–º –∑–Ω–∞–∫ —á–∞—Å–æ–≤
    await callback.message.answer(
        text=LEXICON_RU['rock_paper_scissors'][result].format(bot_item),
        reply_markup=keyboards.yes_no_kb
    )
    await callback.message.delete()


# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É '–ß–∏—Å–ª–æ–≤–∞—è —É–≥–∞–¥–∞–π–∫–∞üî¢'
@router.callback_query(F.data == 'number_guessing')
async def start_number_guessing_game(callback: CallbackQuery, UsersStorage: dict[int, User]):
    user = UsersStorage[callback.from_user.id]

    user.is_playing = True
    user.current_game = Games.NumberGuessing
    user.number_guessing.attempts = 7
    user.number_guessing.secret_number = services.get_random_number(1, 100)

    await callback.answer() # –£–±–∏—Ä–∞–µ–º –∑–Ω–∞–∫ —á–∞—Å–æ–≤
    await callback.message.answer(text=LEXICON_RU[user.current_game.value]['welcome'])
    await callback.message.delete()


# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–æ—Å—Ç–æ—è—â–∏–µ –∏–∑ —á–∏—Å–µ–ª
@router.message(lambda x: x.text and x.text.isdigit() and 1 <= int(x.text) <= 100)
async def process_number_guessing_answer(message: Message, UsersStorage: dict[int, User]):
    user = UsersStorage[message.from_user.id]

    if user.current_game == Games.NumberGuessing:
        # –õ–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞, –µ—Å–ª–∏ —Ç–µ–∫—É—â–∞—è –∏–≥—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ß–∏—Å–ª–æ–≤–∞—è —É–≥–∞–¥–∞–π–∫–∞
        curr_num = int(message.text)

        if curr_num == user.number_guessing.secret_number:
            user.is_playing = False
            user.number_guessing.wins += 1
            user.number_guessing.total_games += 1

            await message.answer(
                text=LEXICON_RU['number_guessing']['win'],
                reply_markup=keyboards.yes_no_kb
            )
        else:
            user.number_guessing.attempts -= 1

            if not user.number_guessing.attempts:
                user.is_playing = False
                user.number_guessing.total_games += 1

                await message.answer(
                    text=LEXICON_RU['number_guessing']['lose'].format(user.number_guessing.secret_number),
                    reply_markup=keyboards.yes_no_kb
                )
            else:
                more_or_less = ("–º–µ–Ω—å—à–µ", "–±–æ–ª—å—à–µ")[curr_num < user.number_guessing.secret_number]

                await message.answer(
                    text=LEXICON_RU['number_guessing']['next_try'].format(more_or_less, user.number_guessing.attempts)
                )
    elif not user.is_playing:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â–µ –Ω–µ –∏–≥—Ä–∞–µ—Ç
        await message.answer(
            text=LEXICON_RU['is_not_playing_yet']
        )
    else:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ–º –æ—Ç–≤–µ—Ç–µ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∏–≥—Ä—ã, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–≥—Ä–∞–µ—Ç –≤ –¥—Ä—É–≥—É—é –∏–≥—Ä—É
        await message.answer(
            text=LEXICON_RU[user.current_game.value]['impossible_answer']
        )

# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫—É '–î–∞–≤–∞–πüòé'
@router.callback_query(F.data == '–î–∞–≤–∞–πüòé')
async def process_positive_answer(callback: CallbackQuery, UsersStorage: dict[int, User]):
    user = UsersStorage[callback.from_user.id]

    await callback.answer() # –£–±–∏—Ä–∞–µ–º –∑–Ω–∞–∫ —á–∞—Å–æ–≤

    if user.current_game == Games.RockPaperScissors:
        await start_rock_paper_scissors_game(callback, UsersStorage)
    elif user.current_game == Games.NumberGuessing:
        await start_number_guessing_game(callback, UsersStorage)
    else:
        await process_play_command(callback, UsersStorage)

# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫—É '–ù–µ —Ö–æ—á—É‚òπÔ∏è'
@router.callback_query(F.data == '–ù–µ —Ö–æ—á—É‚òπÔ∏è')
async def process_negative_answer(callback: CallbackQuery, UsersStorage: dict[int, User]):
    user = UsersStorage[callback.from_user.id]

    user.is_playing = False
    user.current_game = None

    await callback.answer() # –£–±–∏—Ä–∞–µ–º –∑–Ω–∞–∫ —á–∞—Å–æ–≤
    await callback.message.answer(
        text=LEXICON_RU['disagreement']
    )
    await callback.message.delete()

# –û–±—Ä–∞–±–∞—Ç—ã–≤–µ–º –ª—é–±—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –ø—Ä–æ—à–µ–¥—à–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Ö—ç–Ω–¥–ª–µ—Ä—ã
@router.message()
async def process_other_answers(message: Message, UsersStorage: dict[int, User]):
    user = UsersStorage[message.from_user.id]

    if user.is_playing:
        await message.answer(
            text=LEXICON_RU[user.current_game.value]['impossible_answer']
        )
    else:
        await message.answer(
            text=LEXICON_RU['misunderstanding']
        )